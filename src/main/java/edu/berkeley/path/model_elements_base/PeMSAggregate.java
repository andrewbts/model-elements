/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * Used in both the 5 minute and 1 hour case for per-lane
   * and per-station aggregated data, and in the 1 day case
   * for per-station aggregated data.
   * */
public class PeMSAggregate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PeMSAggregate\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* Used in both the 5 minute and 1 hour case for per-lane\\n   * and per-station aggregated data, and in the 1 day case\\n   * for per-station aggregated data.\\n   *\",\"fields\":[{\"name\":\"samples\",\"type\":[\"long\",\"null\"]},{\"name\":\"flow\",\"type\":[\"double\",\"null\"]},{\"name\":\"avgOccupancy\",\"type\":[\"double\",\"null\"]},{\"name\":\"avgSpeed\",\"type\":[\"double\",\"null\"]},{\"name\":\"observed\",\"type\":[\"double\",\"null\"]}]}");
  @Deprecated public java.lang.Long samples;
  @Deprecated public java.lang.Double flow;
  @Deprecated public java.lang.Double avgOccupancy;
  @Deprecated public java.lang.Double avgSpeed;
  @Deprecated public java.lang.Double observed;

  /**
   * Default constructor.
   */
  public PeMSAggregate() {}

  /**
   * All-args constructor.
   */
  public PeMSAggregate(java.lang.Long samples, java.lang.Double flow, java.lang.Double avgOccupancy, java.lang.Double avgSpeed, java.lang.Double observed) {
    this.samples = samples;
    this.flow = flow;
    this.avgOccupancy = avgOccupancy;
    this.avgSpeed = avgSpeed;
    this.observed = observed;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return samples;
    case 1: return flow;
    case 2: return avgOccupancy;
    case 3: return avgSpeed;
    case 4: return observed;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: samples = (java.lang.Long)value$; break;
    case 1: flow = (java.lang.Double)value$; break;
    case 2: avgOccupancy = (java.lang.Double)value$; break;
    case 3: avgSpeed = (java.lang.Double)value$; break;
    case 4: observed = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'samples' field.
   */
  public java.lang.Long getSamples() {
    return samples;
  }

  /**
   * Sets the value of the 'samples' field.
   * @param value the value to set.
   */
  public void setSamples(java.lang.Long value) {
    this.samples = value;
  }

  /**
   * Gets the value of the 'flow' field.
   */
  public java.lang.Double getFlow() {
    return flow;
  }

  /**
   * Sets the value of the 'flow' field.
   * @param value the value to set.
   */
  public void setFlow(java.lang.Double value) {
    this.flow = value;
  }

  /**
   * Gets the value of the 'avgOccupancy' field.
   */
  public java.lang.Double getAvgOccupancy() {
    return avgOccupancy;
  }

  /**
   * Sets the value of the 'avgOccupancy' field.
   * @param value the value to set.
   */
  public void setAvgOccupancy(java.lang.Double value) {
    this.avgOccupancy = value;
  }

  /**
   * Gets the value of the 'avgSpeed' field.
   */
  public java.lang.Double getAvgSpeed() {
    return avgSpeed;
  }

  /**
   * Sets the value of the 'avgSpeed' field.
   * @param value the value to set.
   */
  public void setAvgSpeed(java.lang.Double value) {
    this.avgSpeed = value;
  }

  /**
   * Gets the value of the 'observed' field.
   */
  public java.lang.Double getObserved() {
    return observed;
  }

  /**
   * Sets the value of the 'observed' field.
   * @param value the value to set.
   */
  public void setObserved(java.lang.Double value) {
    this.observed = value;
  }

  /** Creates a new PeMSAggregate RecordBuilder */
  public static edu.berkeley.path.model_elements_base.PeMSAggregate.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.PeMSAggregate.Builder();
  }
  
  /** Creates a new PeMSAggregate RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.PeMSAggregate.Builder newBuilder(edu.berkeley.path.model_elements_base.PeMSAggregate.Builder other) {
    return new edu.berkeley.path.model_elements_base.PeMSAggregate.Builder(other);
  }
  
  /** Creates a new PeMSAggregate RecordBuilder by copying an existing PeMSAggregate instance */
  public static edu.berkeley.path.model_elements_base.PeMSAggregate.Builder newBuilder(edu.berkeley.path.model_elements_base.PeMSAggregate other) {
    return new edu.berkeley.path.model_elements_base.PeMSAggregate.Builder(other);
  }
  
  /**
   * RecordBuilder for PeMSAggregate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PeMSAggregate>
    implements org.apache.avro.data.RecordBuilder<PeMSAggregate> {

    private java.lang.Long samples;
    private java.lang.Double flow;
    private java.lang.Double avgOccupancy;
    private java.lang.Double avgSpeed;
    private java.lang.Double observed;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.PeMSAggregate.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.PeMSAggregate.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PeMSAggregate instance */
    private Builder(edu.berkeley.path.model_elements_base.PeMSAggregate other) {
            super(edu.berkeley.path.model_elements_base.PeMSAggregate.SCHEMA$);
      if (isValidValue(fields()[0], other.samples)) {
        this.samples = (java.lang.Long) data().deepCopy(fields()[0].schema(), other.samples);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.flow)) {
        this.flow = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.flow);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.avgOccupancy)) {
        this.avgOccupancy = (java.lang.Double) data().deepCopy(fields()[2].schema(), other.avgOccupancy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.avgSpeed)) {
        this.avgSpeed = (java.lang.Double) data().deepCopy(fields()[3].schema(), other.avgSpeed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.observed)) {
        this.observed = (java.lang.Double) data().deepCopy(fields()[4].schema(), other.observed);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'samples' field */
    public java.lang.Long getSamples() {
      return samples;
    }
    
    /** Sets the value of the 'samples' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder setSamples(java.lang.Long value) {
      validate(fields()[0], value);
      this.samples = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'samples' field has been set */
    public boolean hasSamples() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'samples' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder clearSamples() {
      samples = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'flow' field */
    public java.lang.Double getFlow() {
      return flow;
    }
    
    /** Sets the value of the 'flow' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder setFlow(java.lang.Double value) {
      validate(fields()[1], value);
      this.flow = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'flow' field has been set */
    public boolean hasFlow() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'flow' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder clearFlow() {
      flow = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'avgOccupancy' field */
    public java.lang.Double getAvgOccupancy() {
      return avgOccupancy;
    }
    
    /** Sets the value of the 'avgOccupancy' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder setAvgOccupancy(java.lang.Double value) {
      validate(fields()[2], value);
      this.avgOccupancy = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'avgOccupancy' field has been set */
    public boolean hasAvgOccupancy() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'avgOccupancy' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder clearAvgOccupancy() {
      avgOccupancy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'avgSpeed' field */
    public java.lang.Double getAvgSpeed() {
      return avgSpeed;
    }
    
    /** Sets the value of the 'avgSpeed' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder setAvgSpeed(java.lang.Double value) {
      validate(fields()[3], value);
      this.avgSpeed = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'avgSpeed' field has been set */
    public boolean hasAvgSpeed() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'avgSpeed' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder clearAvgSpeed() {
      avgSpeed = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'observed' field */
    public java.lang.Double getObserved() {
      return observed;
    }
    
    /** Sets the value of the 'observed' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder setObserved(java.lang.Double value) {
      validate(fields()[4], value);
      this.observed = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'observed' field has been set */
    public boolean hasObserved() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'observed' field */
    public edu.berkeley.path.model_elements_base.PeMSAggregate.Builder clearObserved() {
      observed = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public PeMSAggregate build() {
      try {
        PeMSAggregate record = new PeMSAggregate();
        record.samples = fieldSetFlags()[0] ? this.samples : (java.lang.Long) defaultValue(fields()[0]);
        record.flow = fieldSetFlags()[1] ? this.flow : (java.lang.Double) defaultValue(fields()[1]);
        record.avgOccupancy = fieldSetFlags()[2] ? this.avgOccupancy : (java.lang.Double) defaultValue(fields()[2]);
        record.avgSpeed = fieldSetFlags()[3] ? this.avgSpeed : (java.lang.Double) defaultValue(fields()[3]);
        record.observed = fieldSetFlags()[4] ? this.observed : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
