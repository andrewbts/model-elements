/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
public class Point extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Point\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"default\":0.0},{\"name\":\"longitude\",\"type\":\"double\",\"default\":0.0}]}");
  @Deprecated public double latitude;
  @Deprecated public double longitude;

  /**
   * Default constructor.
   */
  public Point() {}

  /**
   * All-args constructor.
   */
  public Point(java.lang.Double latitude, java.lang.Double longitude) {
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return latitude;
    case 1: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: latitude = (java.lang.Double)value$; break;
    case 1: longitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /** Creates a new Point RecordBuilder */
  public static edu.berkeley.path.model_elements_base.Point.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.Point.Builder();
  }
  
  /** Creates a new Point RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.Point.Builder newBuilder(edu.berkeley.path.model_elements_base.Point.Builder other) {
    return new edu.berkeley.path.model_elements_base.Point.Builder(other);
  }
  
  /** Creates a new Point RecordBuilder by copying an existing Point instance */
  public static edu.berkeley.path.model_elements_base.Point.Builder newBuilder(edu.berkeley.path.model_elements_base.Point other) {
    return new edu.berkeley.path.model_elements_base.Point.Builder(other);
  }
  
  /**
   * RecordBuilder for Point instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Point>
    implements org.apache.avro.data.RecordBuilder<Point> {

    private double latitude;
    private double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.Point.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.Point.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Point instance */
    private Builder(edu.berkeley.path.model_elements_base.Point other) {
            super(edu.berkeley.path.model_elements_base.Point.SCHEMA$);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'latitude' field */
    public java.lang.Double getLatitude() {
      return latitude;
    }
    
    /** Sets the value of the 'latitude' field */
    public edu.berkeley.path.model_elements_base.Point.Builder setLatitude(double value) {
      validate(fields()[0], value);
      this.latitude = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'latitude' field has been set */
    public boolean hasLatitude() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'latitude' field */
    public edu.berkeley.path.model_elements_base.Point.Builder clearLatitude() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'longitude' field */
    public java.lang.Double getLongitude() {
      return longitude;
    }
    
    /** Sets the value of the 'longitude' field */
    public edu.berkeley.path.model_elements_base.Point.Builder setLongitude(double value) {
      validate(fields()[1], value);
      this.longitude = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'longitude' field has been set */
    public boolean hasLongitude() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'longitude' field */
    public edu.berkeley.path.model_elements_base.Point.Builder clearLongitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Point build() {
      try {
        Point record = new Point();
        record.latitude = fieldSetFlags()[0] ? this.latitude : (java.lang.Double) defaultValue(fields()[0]);
        record.longitude = fieldSetFlags()[1] ? this.longitude : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
