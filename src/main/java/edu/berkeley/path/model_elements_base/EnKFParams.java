/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * Context and Run Config section
   *
   * Configuration that applies to one run or a group of runs.
   *
   * These objects correspond to the TBD Run tables. */
public class EnKFParams extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnKFParams\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* Context and Run Config section\\n   *\\n   * Configuration that applies to one run or a group of runs.\\n   *\\n   * These objects correspond to the TBD Run tables.\",\"fields\":[{\"name\":\"pemsNoiseMean\",\"type\":\"double\"},{\"name\":\"pemsNoiseStdev\",\"type\":\"double\"},{\"name\":\"PemsBlackList\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"navteqNoiseMean\",\"type\":\"double\"},{\"name\":\"navteqNoiseStdev\",\"type\":\"double\"},{\"name\":\"navteqPercentage\",\"type\":\"double\"},{\"name\":\"telenavNoiseMean\",\"type\":\"double\"},{\"name\":\"telenavNoiseStdev\",\"type\":\"double\"},{\"name\":\"telenavPercentage\",\"type\":\"double\"},{\"name\":\"useLocalization\",\"type\":\"boolean\"},{\"name\":\"localizationDistance\",\"type\":\"double\"}]}");
  @Deprecated public double pemsNoiseMean;
  @Deprecated public double pemsNoiseStdev;
  @Deprecated public java.util.List<java.lang.Integer> PemsBlackList;
  @Deprecated public double navteqNoiseMean;
  @Deprecated public double navteqNoiseStdev;
  @Deprecated public double navteqPercentage;
  @Deprecated public double telenavNoiseMean;
  @Deprecated public double telenavNoiseStdev;
  @Deprecated public double telenavPercentage;
  @Deprecated public boolean useLocalization;
  @Deprecated public double localizationDistance;

  /**
   * Default constructor.
   */
  public EnKFParams() {}

  /**
   * All-args constructor.
   */
  public EnKFParams(java.lang.Double pemsNoiseMean, java.lang.Double pemsNoiseStdev, java.util.List<java.lang.Integer> PemsBlackList, java.lang.Double navteqNoiseMean, java.lang.Double navteqNoiseStdev, java.lang.Double navteqPercentage, java.lang.Double telenavNoiseMean, java.lang.Double telenavNoiseStdev, java.lang.Double telenavPercentage, java.lang.Boolean useLocalization, java.lang.Double localizationDistance) {
    this.pemsNoiseMean = pemsNoiseMean;
    this.pemsNoiseStdev = pemsNoiseStdev;
    this.PemsBlackList = PemsBlackList;
    this.navteqNoiseMean = navteqNoiseMean;
    this.navteqNoiseStdev = navteqNoiseStdev;
    this.navteqPercentage = navteqPercentage;
    this.telenavNoiseMean = telenavNoiseMean;
    this.telenavNoiseStdev = telenavNoiseStdev;
    this.telenavPercentage = telenavPercentage;
    this.useLocalization = useLocalization;
    this.localizationDistance = localizationDistance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pemsNoiseMean;
    case 1: return pemsNoiseStdev;
    case 2: return PemsBlackList;
    case 3: return navteqNoiseMean;
    case 4: return navteqNoiseStdev;
    case 5: return navteqPercentage;
    case 6: return telenavNoiseMean;
    case 7: return telenavNoiseStdev;
    case 8: return telenavPercentage;
    case 9: return useLocalization;
    case 10: return localizationDistance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pemsNoiseMean = (java.lang.Double)value$; break;
    case 1: pemsNoiseStdev = (java.lang.Double)value$; break;
    case 2: PemsBlackList = (java.util.List<java.lang.Integer>)value$; break;
    case 3: navteqNoiseMean = (java.lang.Double)value$; break;
    case 4: navteqNoiseStdev = (java.lang.Double)value$; break;
    case 5: navteqPercentage = (java.lang.Double)value$; break;
    case 6: telenavNoiseMean = (java.lang.Double)value$; break;
    case 7: telenavNoiseStdev = (java.lang.Double)value$; break;
    case 8: telenavPercentage = (java.lang.Double)value$; break;
    case 9: useLocalization = (java.lang.Boolean)value$; break;
    case 10: localizationDistance = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pemsNoiseMean' field.
   */
  public java.lang.Double getPemsNoiseMean() {
    return pemsNoiseMean;
  }

  /**
   * Sets the value of the 'pemsNoiseMean' field.
   * @param value the value to set.
   */
  public void setPemsNoiseMean(java.lang.Double value) {
    this.pemsNoiseMean = value;
  }

  /**
   * Gets the value of the 'pemsNoiseStdev' field.
   */
  public java.lang.Double getPemsNoiseStdev() {
    return pemsNoiseStdev;
  }

  /**
   * Sets the value of the 'pemsNoiseStdev' field.
   * @param value the value to set.
   */
  public void setPemsNoiseStdev(java.lang.Double value) {
    this.pemsNoiseStdev = value;
  }

  /**
   * Gets the value of the 'PemsBlackList' field.
   */
  public java.util.List<java.lang.Integer> getPemsBlackList() {
    return PemsBlackList;
  }

  /**
   * Sets the value of the 'PemsBlackList' field.
   * @param value the value to set.
   */
  public void setPemsBlackList(java.util.List<java.lang.Integer> value) {
    this.PemsBlackList = value;
  }

  /**
   * Gets the value of the 'navteqNoiseMean' field.
   */
  public java.lang.Double getNavteqNoiseMean() {
    return navteqNoiseMean;
  }

  /**
   * Sets the value of the 'navteqNoiseMean' field.
   * @param value the value to set.
   */
  public void setNavteqNoiseMean(java.lang.Double value) {
    this.navteqNoiseMean = value;
  }

  /**
   * Gets the value of the 'navteqNoiseStdev' field.
   */
  public java.lang.Double getNavteqNoiseStdev() {
    return navteqNoiseStdev;
  }

  /**
   * Sets the value of the 'navteqNoiseStdev' field.
   * @param value the value to set.
   */
  public void setNavteqNoiseStdev(java.lang.Double value) {
    this.navteqNoiseStdev = value;
  }

  /**
   * Gets the value of the 'navteqPercentage' field.
   */
  public java.lang.Double getNavteqPercentage() {
    return navteqPercentage;
  }

  /**
   * Sets the value of the 'navteqPercentage' field.
   * @param value the value to set.
   */
  public void setNavteqPercentage(java.lang.Double value) {
    this.navteqPercentage = value;
  }

  /**
   * Gets the value of the 'telenavNoiseMean' field.
   */
  public java.lang.Double getTelenavNoiseMean() {
    return telenavNoiseMean;
  }

  /**
   * Sets the value of the 'telenavNoiseMean' field.
   * @param value the value to set.
   */
  public void setTelenavNoiseMean(java.lang.Double value) {
    this.telenavNoiseMean = value;
  }

  /**
   * Gets the value of the 'telenavNoiseStdev' field.
   */
  public java.lang.Double getTelenavNoiseStdev() {
    return telenavNoiseStdev;
  }

  /**
   * Sets the value of the 'telenavNoiseStdev' field.
   * @param value the value to set.
   */
  public void setTelenavNoiseStdev(java.lang.Double value) {
    this.telenavNoiseStdev = value;
  }

  /**
   * Gets the value of the 'telenavPercentage' field.
   */
  public java.lang.Double getTelenavPercentage() {
    return telenavPercentage;
  }

  /**
   * Sets the value of the 'telenavPercentage' field.
   * @param value the value to set.
   */
  public void setTelenavPercentage(java.lang.Double value) {
    this.telenavPercentage = value;
  }

  /**
   * Gets the value of the 'useLocalization' field.
   */
  public java.lang.Boolean getUseLocalization() {
    return useLocalization;
  }

  /**
   * Sets the value of the 'useLocalization' field.
   * @param value the value to set.
   */
  public void setUseLocalization(java.lang.Boolean value) {
    this.useLocalization = value;
  }

  /**
   * Gets the value of the 'localizationDistance' field.
   */
  public java.lang.Double getLocalizationDistance() {
    return localizationDistance;
  }

  /**
   * Sets the value of the 'localizationDistance' field.
   * @param value the value to set.
   */
  public void setLocalizationDistance(java.lang.Double value) {
    this.localizationDistance = value;
  }

  /** Creates a new EnKFParams RecordBuilder */
  public static edu.berkeley.path.model_elements_base.EnKFParams.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.EnKFParams.Builder();
  }
  
  /** Creates a new EnKFParams RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.EnKFParams.Builder newBuilder(edu.berkeley.path.model_elements_base.EnKFParams.Builder other) {
    return new edu.berkeley.path.model_elements_base.EnKFParams.Builder(other);
  }
  
  /** Creates a new EnKFParams RecordBuilder by copying an existing EnKFParams instance */
  public static edu.berkeley.path.model_elements_base.EnKFParams.Builder newBuilder(edu.berkeley.path.model_elements_base.EnKFParams other) {
    return new edu.berkeley.path.model_elements_base.EnKFParams.Builder(other);
  }
  
  /**
   * RecordBuilder for EnKFParams instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnKFParams>
    implements org.apache.avro.data.RecordBuilder<EnKFParams> {

    private double pemsNoiseMean;
    private double pemsNoiseStdev;
    private java.util.List<java.lang.Integer> PemsBlackList;
    private double navteqNoiseMean;
    private double navteqNoiseStdev;
    private double navteqPercentage;
    private double telenavNoiseMean;
    private double telenavNoiseStdev;
    private double telenavPercentage;
    private boolean useLocalization;
    private double localizationDistance;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.EnKFParams.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.EnKFParams.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing EnKFParams instance */
    private Builder(edu.berkeley.path.model_elements_base.EnKFParams other) {
            super(edu.berkeley.path.model_elements_base.EnKFParams.SCHEMA$);
      if (isValidValue(fields()[0], other.pemsNoiseMean)) {
        this.pemsNoiseMean = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.pemsNoiseMean);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pemsNoiseStdev)) {
        this.pemsNoiseStdev = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.pemsNoiseStdev);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.PemsBlackList)) {
        this.PemsBlackList = (java.util.List<java.lang.Integer>) data().deepCopy(fields()[2].schema(), other.PemsBlackList);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.navteqNoiseMean)) {
        this.navteqNoiseMean = (java.lang.Double) data().deepCopy(fields()[3].schema(), other.navteqNoiseMean);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.navteqNoiseStdev)) {
        this.navteqNoiseStdev = (java.lang.Double) data().deepCopy(fields()[4].schema(), other.navteqNoiseStdev);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.navteqPercentage)) {
        this.navteqPercentage = (java.lang.Double) data().deepCopy(fields()[5].schema(), other.navteqPercentage);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.telenavNoiseMean)) {
        this.telenavNoiseMean = (java.lang.Double) data().deepCopy(fields()[6].schema(), other.telenavNoiseMean);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.telenavNoiseStdev)) {
        this.telenavNoiseStdev = (java.lang.Double) data().deepCopy(fields()[7].schema(), other.telenavNoiseStdev);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.telenavPercentage)) {
        this.telenavPercentage = (java.lang.Double) data().deepCopy(fields()[8].schema(), other.telenavPercentage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.useLocalization)) {
        this.useLocalization = (java.lang.Boolean) data().deepCopy(fields()[9].schema(), other.useLocalization);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.localizationDistance)) {
        this.localizationDistance = (java.lang.Double) data().deepCopy(fields()[10].schema(), other.localizationDistance);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'pemsNoiseMean' field */
    public java.lang.Double getPemsNoiseMean() {
      return pemsNoiseMean;
    }
    
    /** Sets the value of the 'pemsNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setPemsNoiseMean(double value) {
      validate(fields()[0], value);
      this.pemsNoiseMean = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pemsNoiseMean' field has been set */
    public boolean hasPemsNoiseMean() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pemsNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearPemsNoiseMean() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pemsNoiseStdev' field */
    public java.lang.Double getPemsNoiseStdev() {
      return pemsNoiseStdev;
    }
    
    /** Sets the value of the 'pemsNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setPemsNoiseStdev(double value) {
      validate(fields()[1], value);
      this.pemsNoiseStdev = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pemsNoiseStdev' field has been set */
    public boolean hasPemsNoiseStdev() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pemsNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearPemsNoiseStdev() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'PemsBlackList' field */
    public java.util.List<java.lang.Integer> getPemsBlackList() {
      return PemsBlackList;
    }
    
    /** Sets the value of the 'PemsBlackList' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setPemsBlackList(java.util.List<java.lang.Integer> value) {
      validate(fields()[2], value);
      this.PemsBlackList = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'PemsBlackList' field has been set */
    public boolean hasPemsBlackList() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'PemsBlackList' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearPemsBlackList() {
      PemsBlackList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'navteqNoiseMean' field */
    public java.lang.Double getNavteqNoiseMean() {
      return navteqNoiseMean;
    }
    
    /** Sets the value of the 'navteqNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setNavteqNoiseMean(double value) {
      validate(fields()[3], value);
      this.navteqNoiseMean = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'navteqNoiseMean' field has been set */
    public boolean hasNavteqNoiseMean() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'navteqNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearNavteqNoiseMean() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'navteqNoiseStdev' field */
    public java.lang.Double getNavteqNoiseStdev() {
      return navteqNoiseStdev;
    }
    
    /** Sets the value of the 'navteqNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setNavteqNoiseStdev(double value) {
      validate(fields()[4], value);
      this.navteqNoiseStdev = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'navteqNoiseStdev' field has been set */
    public boolean hasNavteqNoiseStdev() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'navteqNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearNavteqNoiseStdev() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'navteqPercentage' field */
    public java.lang.Double getNavteqPercentage() {
      return navteqPercentage;
    }
    
    /** Sets the value of the 'navteqPercentage' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setNavteqPercentage(double value) {
      validate(fields()[5], value);
      this.navteqPercentage = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'navteqPercentage' field has been set */
    public boolean hasNavteqPercentage() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'navteqPercentage' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearNavteqPercentage() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'telenavNoiseMean' field */
    public java.lang.Double getTelenavNoiseMean() {
      return telenavNoiseMean;
    }
    
    /** Sets the value of the 'telenavNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setTelenavNoiseMean(double value) {
      validate(fields()[6], value);
      this.telenavNoiseMean = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'telenavNoiseMean' field has been set */
    public boolean hasTelenavNoiseMean() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'telenavNoiseMean' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearTelenavNoiseMean() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'telenavNoiseStdev' field */
    public java.lang.Double getTelenavNoiseStdev() {
      return telenavNoiseStdev;
    }
    
    /** Sets the value of the 'telenavNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setTelenavNoiseStdev(double value) {
      validate(fields()[7], value);
      this.telenavNoiseStdev = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'telenavNoiseStdev' field has been set */
    public boolean hasTelenavNoiseStdev() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'telenavNoiseStdev' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearTelenavNoiseStdev() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'telenavPercentage' field */
    public java.lang.Double getTelenavPercentage() {
      return telenavPercentage;
    }
    
    /** Sets the value of the 'telenavPercentage' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setTelenavPercentage(double value) {
      validate(fields()[8], value);
      this.telenavPercentage = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'telenavPercentage' field has been set */
    public boolean hasTelenavPercentage() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'telenavPercentage' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearTelenavPercentage() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'useLocalization' field */
    public java.lang.Boolean getUseLocalization() {
      return useLocalization;
    }
    
    /** Sets the value of the 'useLocalization' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setUseLocalization(boolean value) {
      validate(fields()[9], value);
      this.useLocalization = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'useLocalization' field has been set */
    public boolean hasUseLocalization() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'useLocalization' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearUseLocalization() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'localizationDistance' field */
    public java.lang.Double getLocalizationDistance() {
      return localizationDistance;
    }
    
    /** Sets the value of the 'localizationDistance' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder setLocalizationDistance(double value) {
      validate(fields()[10], value);
      this.localizationDistance = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'localizationDistance' field has been set */
    public boolean hasLocalizationDistance() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'localizationDistance' field */
    public edu.berkeley.path.model_elements_base.EnKFParams.Builder clearLocalizationDistance() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public EnKFParams build() {
      try {
        EnKFParams record = new EnKFParams();
        record.pemsNoiseMean = fieldSetFlags()[0] ? this.pemsNoiseMean : (java.lang.Double) defaultValue(fields()[0]);
        record.pemsNoiseStdev = fieldSetFlags()[1] ? this.pemsNoiseStdev : (java.lang.Double) defaultValue(fields()[1]);
        record.PemsBlackList = fieldSetFlags()[2] ? this.PemsBlackList : (java.util.List<java.lang.Integer>) defaultValue(fields()[2]);
        record.navteqNoiseMean = fieldSetFlags()[3] ? this.navteqNoiseMean : (java.lang.Double) defaultValue(fields()[3]);
        record.navteqNoiseStdev = fieldSetFlags()[4] ? this.navteqNoiseStdev : (java.lang.Double) defaultValue(fields()[4]);
        record.navteqPercentage = fieldSetFlags()[5] ? this.navteqPercentage : (java.lang.Double) defaultValue(fields()[5]);
        record.telenavNoiseMean = fieldSetFlags()[6] ? this.telenavNoiseMean : (java.lang.Double) defaultValue(fields()[6]);
        record.telenavNoiseStdev = fieldSetFlags()[7] ? this.telenavNoiseStdev : (java.lang.Double) defaultValue(fields()[7]);
        record.telenavPercentage = fieldSetFlags()[8] ? this.telenavPercentage : (java.lang.Double) defaultValue(fields()[8]);
        record.useLocalization = fieldSetFlags()[9] ? this.useLocalization : (java.lang.Boolean) defaultValue(fields()[9]);
        record.localizationDistance = fieldSetFlags()[10] ? this.localizationDistance : (java.lang.Double) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
