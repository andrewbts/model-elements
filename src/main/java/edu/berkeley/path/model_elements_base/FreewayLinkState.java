/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * State of one link at one time.
   *
   * May contain density, velocity, or both. */
public class FreewayLinkState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreewayLinkState\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* State of one link at one time.\\n   *\\n   * May contain density, velocity, or both.\",\"fields\":[{\"name\":\"density\",\"type\":[\"double\",\"null\"]},{\"name\":\"velocity\",\"type\":[\"double\",\"null\"]}]}");
  @Deprecated public java.lang.Double density;
  @Deprecated public java.lang.Double velocity;

  /**
   * Default constructor.
   */
  public FreewayLinkState() {}

  /**
   * All-args constructor.
   */
  public FreewayLinkState(java.lang.Double density, java.lang.Double velocity) {
    this.density = density;
    this.velocity = velocity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return density;
    case 1: return velocity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: density = (java.lang.Double)value$; break;
    case 1: velocity = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'density' field.
   */
  public java.lang.Double getDensity() {
    return density;
  }

  /**
   * Sets the value of the 'density' field.
   * @param value the value to set.
   */
  public void setDensity(java.lang.Double value) {
    this.density = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   */
  public java.lang.Double getVelocity() {
    return velocity;
  }

  /**
   * Sets the value of the 'velocity' field.
   * @param value the value to set.
   */
  public void setVelocity(java.lang.Double value) {
    this.velocity = value;
  }

  /** Creates a new FreewayLinkState RecordBuilder */
  public static edu.berkeley.path.model_elements_base.FreewayLinkState.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.FreewayLinkState.Builder();
  }
  
  /** Creates a new FreewayLinkState RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.FreewayLinkState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayLinkState.Builder other) {
    return new edu.berkeley.path.model_elements_base.FreewayLinkState.Builder(other);
  }
  
  /** Creates a new FreewayLinkState RecordBuilder by copying an existing FreewayLinkState instance */
  public static edu.berkeley.path.model_elements_base.FreewayLinkState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayLinkState other) {
    return new edu.berkeley.path.model_elements_base.FreewayLinkState.Builder(other);
  }
  
  /**
   * RecordBuilder for FreewayLinkState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreewayLinkState>
    implements org.apache.avro.data.RecordBuilder<FreewayLinkState> {

    private java.lang.Double density;
    private java.lang.Double velocity;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.FreewayLinkState.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.FreewayLinkState.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FreewayLinkState instance */
    private Builder(edu.berkeley.path.model_elements_base.FreewayLinkState other) {
            super(edu.berkeley.path.model_elements_base.FreewayLinkState.SCHEMA$);
      if (isValidValue(fields()[0], other.density)) {
        this.density = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.density);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.velocity)) {
        this.velocity = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.velocity);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'density' field */
    public java.lang.Double getDensity() {
      return density;
    }
    
    /** Sets the value of the 'density' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkState.Builder setDensity(java.lang.Double value) {
      validate(fields()[0], value);
      this.density = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'density' field has been set */
    public boolean hasDensity() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'density' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkState.Builder clearDensity() {
      density = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'velocity' field */
    public java.lang.Double getVelocity() {
      return velocity;
    }
    
    /** Sets the value of the 'velocity' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkState.Builder setVelocity(java.lang.Double value) {
      validate(fields()[1], value);
      this.velocity = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'velocity' field has been set */
    public boolean hasVelocity() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'velocity' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkState.Builder clearVelocity() {
      velocity = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FreewayLinkState build() {
      try {
        FreewayLinkState record = new FreewayLinkState();
        record.density = fieldSetFlags()[0] ? this.density : (java.lang.Double) defaultValue(fields()[0]);
        record.velocity = fieldSetFlags()[1] ? this.velocity : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
