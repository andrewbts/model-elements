/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * Velocity on each link at a point in time */
public class VelocityMap extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VelocityMap\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* Velocity on each link at a point in time\",\"fields\":[{\"name\":\"metersPerSecond\",\"type\":{\"type\":\"map\",\"values\":\"double\",\"avro.java.string\":\"String\"},\"doc\":\"map key is linkId\",\"default\":{}}]}");
  /** map key is linkId */
  @Deprecated public java.util.Map<java.lang.String,java.lang.Double> metersPerSecond;

  /**
   * Default constructor.
   */
  public VelocityMap() {}

  /**
   * All-args constructor.
   */
  public VelocityMap(java.util.Map<java.lang.String,java.lang.Double> metersPerSecond) {
    this.metersPerSecond = metersPerSecond;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metersPerSecond;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metersPerSecond = (java.util.Map<java.lang.String,java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'metersPerSecond' field.
   * map key is linkId   */
  public java.util.Map<java.lang.String,java.lang.Double> getMetersPerSecond() {
    return metersPerSecond;
  }

  /**
   * Sets the value of the 'metersPerSecond' field.
   * map key is linkId   * @param value the value to set.
   */
  public void setMetersPerSecond(java.util.Map<java.lang.String,java.lang.Double> value) {
    this.metersPerSecond = value;
  }

  /** Creates a new VelocityMap RecordBuilder */
  public static edu.berkeley.path.model_elements_base.VelocityMap.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.VelocityMap.Builder();
  }
  
  /** Creates a new VelocityMap RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.VelocityMap.Builder newBuilder(edu.berkeley.path.model_elements_base.VelocityMap.Builder other) {
    return new edu.berkeley.path.model_elements_base.VelocityMap.Builder(other);
  }
  
  /** Creates a new VelocityMap RecordBuilder by copying an existing VelocityMap instance */
  public static edu.berkeley.path.model_elements_base.VelocityMap.Builder newBuilder(edu.berkeley.path.model_elements_base.VelocityMap other) {
    return new edu.berkeley.path.model_elements_base.VelocityMap.Builder(other);
  }
  
  /**
   * RecordBuilder for VelocityMap instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VelocityMap>
    implements org.apache.avro.data.RecordBuilder<VelocityMap> {

    private java.util.Map<java.lang.String,java.lang.Double> metersPerSecond;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.VelocityMap.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.VelocityMap.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing VelocityMap instance */
    private Builder(edu.berkeley.path.model_elements_base.VelocityMap other) {
            super(edu.berkeley.path.model_elements_base.VelocityMap.SCHEMA$);
      if (isValidValue(fields()[0], other.metersPerSecond)) {
        this.metersPerSecond = (java.util.Map<java.lang.String,java.lang.Double>) data().deepCopy(fields()[0].schema(), other.metersPerSecond);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'metersPerSecond' field */
    public java.util.Map<java.lang.String,java.lang.Double> getMetersPerSecond() {
      return metersPerSecond;
    }
    
    /** Sets the value of the 'metersPerSecond' field */
    public edu.berkeley.path.model_elements_base.VelocityMap.Builder setMetersPerSecond(java.util.Map<java.lang.String,java.lang.Double> value) {
      validate(fields()[0], value);
      this.metersPerSecond = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'metersPerSecond' field has been set */
    public boolean hasMetersPerSecond() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'metersPerSecond' field */
    public edu.berkeley.path.model_elements_base.VelocityMap.Builder clearMetersPerSecond() {
      metersPerSecond = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public VelocityMap build() {
      try {
        VelocityMap record = new VelocityMap();
        record.metersPerSecond = fieldSetFlags()[0] ? this.metersPerSecond : (java.util.Map<java.lang.String,java.lang.Double>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
