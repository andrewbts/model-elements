/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * One data point in the output of the Path Inference Filter.
   *
   * This record is designed to hold one of the results of a query 
   * by run_id, network_id, link_id, and time interval. Hence the record
   * itself contains none of those, which the caller should keep track of.
   * (Or maybe we should have a PifProbeCoordSet to do that.)
   * */
public class PifProbeCoord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PifProbeCoord\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* One data point in the output of the Path Inference Filter.\\n   *\\n   * This record is designed to hold one of the results of a query \\n   * by run_id, network_id, link_id, and time interval. Hence the record\\n   * itself contains none of those, which the caller should keep track of.\\n   * (Or maybe we should have a PifProbeCoordSet to do that.)\\n   *\",\"fields\":[{\"name\":\"time\",\"type\":{\"type\":\"record\",\"name\":\"DateTime\",\"doc\":\"milliseconds, absolute, since epoch, utc\",\"fields\":[{\"name\":\"milliseconds\",\"type\":\"long\"}]},\"doc\":\"* time of measurement\\n     *\"},{\"name\":\"offset\",\"type\":\"double\",\"doc\":\"* offset, in meters, in the direction of travel, in the queried link.\\n     *\"},{\"name\":\"speed\",\"type\":\"double\",\"doc\":\"* measured speed, in meters per second\\n     *\"},{\"name\":\"probability\",\"type\":\"double\",\"doc\":\"* probability that this point was placed correctly, in the range 0..1.\\n     *\"}]}");
  /** * time of measurement
     * */
  @Deprecated public edu.berkeley.path.model_elements_base.DateTime time;
  /** * offset, in meters, in the direction of travel, in the queried link.
     * */
  @Deprecated public double offset;
  /** * measured speed, in meters per second
     * */
  @Deprecated public double speed;
  /** * probability that this point was placed correctly, in the range 0..1.
     * */
  @Deprecated public double probability;

  /**
   * Default constructor.
   */
  public PifProbeCoord() {}

  /**
   * All-args constructor.
   */
  public PifProbeCoord(edu.berkeley.path.model_elements_base.DateTime time, java.lang.Double offset, java.lang.Double speed, java.lang.Double probability) {
    this.time = time;
    this.offset = offset;
    this.speed = speed;
    this.probability = probability;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return offset;
    case 2: return speed;
    case 3: return probability;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (edu.berkeley.path.model_elements_base.DateTime)value$; break;
    case 1: offset = (java.lang.Double)value$; break;
    case 2: speed = (java.lang.Double)value$; break;
    case 3: probability = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * * time of measurement
     *   */
  public edu.berkeley.path.model_elements_base.DateTime getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * * time of measurement
     *   * @param value the value to set.
   */
  public void setTime(edu.berkeley.path.model_elements_base.DateTime value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * * offset, in meters, in the direction of travel, in the queried link.
     *   */
  public java.lang.Double getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * * offset, in meters, in the direction of travel, in the queried link.
     *   * @param value the value to set.
   */
  public void setOffset(java.lang.Double value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * * measured speed, in meters per second
     *   */
  public java.lang.Double getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * * measured speed, in meters per second
     *   * @param value the value to set.
   */
  public void setSpeed(java.lang.Double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'probability' field.
   * * probability that this point was placed correctly, in the range 0..1.
     *   */
  public java.lang.Double getProbability() {
    return probability;
  }

  /**
   * Sets the value of the 'probability' field.
   * * probability that this point was placed correctly, in the range 0..1.
     *   * @param value the value to set.
   */
  public void setProbability(java.lang.Double value) {
    this.probability = value;
  }

  /** Creates a new PifProbeCoord RecordBuilder */
  public static edu.berkeley.path.model_elements_base.PifProbeCoord.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.PifProbeCoord.Builder();
  }
  
  /** Creates a new PifProbeCoord RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.PifProbeCoord.Builder newBuilder(edu.berkeley.path.model_elements_base.PifProbeCoord.Builder other) {
    return new edu.berkeley.path.model_elements_base.PifProbeCoord.Builder(other);
  }
  
  /** Creates a new PifProbeCoord RecordBuilder by copying an existing PifProbeCoord instance */
  public static edu.berkeley.path.model_elements_base.PifProbeCoord.Builder newBuilder(edu.berkeley.path.model_elements_base.PifProbeCoord other) {
    return new edu.berkeley.path.model_elements_base.PifProbeCoord.Builder(other);
  }
  
  /**
   * RecordBuilder for PifProbeCoord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PifProbeCoord>
    implements org.apache.avro.data.RecordBuilder<PifProbeCoord> {

    private edu.berkeley.path.model_elements_base.DateTime time;
    private double offset;
    private double speed;
    private double probability;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.PifProbeCoord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.PifProbeCoord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PifProbeCoord instance */
    private Builder(edu.berkeley.path.model_elements_base.PifProbeCoord other) {
            super(edu.berkeley.path.model_elements_base.PifProbeCoord.SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = (edu.berkeley.path.model_elements_base.DateTime) data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.offset)) {
        this.offset = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.offset);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = (java.lang.Double) data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.probability)) {
        this.probability = (java.lang.Double) data().deepCopy(fields()[3].schema(), other.probability);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'time' field */
    public edu.berkeley.path.model_elements_base.DateTime getTime() {
      return time;
    }
    
    /** Sets the value of the 'time' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder setTime(edu.berkeley.path.model_elements_base.DateTime value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'time' field has been set */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'time' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder clearTime() {
      time = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'offset' field */
    public java.lang.Double getOffset() {
      return offset;
    }
    
    /** Sets the value of the 'offset' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder setOffset(double value) {
      validate(fields()[1], value);
      this.offset = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'offset' field has been set */
    public boolean hasOffset() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'offset' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder clearOffset() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'speed' field */
    public java.lang.Double getSpeed() {
      return speed;
    }
    
    /** Sets the value of the 'speed' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder setSpeed(double value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'speed' field has been set */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'speed' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder clearSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'probability' field */
    public java.lang.Double getProbability() {
      return probability;
    }
    
    /** Sets the value of the 'probability' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder setProbability(double value) {
      validate(fields()[3], value);
      this.probability = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'probability' field has been set */
    public boolean hasProbability() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'probability' field */
    public edu.berkeley.path.model_elements_base.PifProbeCoord.Builder clearProbability() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PifProbeCoord build() {
      try {
        PifProbeCoord record = new PifProbeCoord();
        record.time = fieldSetFlags()[0] ? this.time : (edu.berkeley.path.model_elements_base.DateTime) defaultValue(fields()[0]);
        record.offset = fieldSetFlags()[1] ? this.offset : (java.lang.Double) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
        record.probability = fieldSetFlags()[3] ? this.probability : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
