/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * Sensor that can describe loop detector, magnetic detector, TMC,
   * camera, radar, etc. */
public class Sensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* Sensor that can describe loop detector, magnetic detector, TMC,\\n   * camera, radar, etc.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"* \\\"Loop\\\", etc. Translated to numeric type in the DB.\"},{\"name\":\"entityId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"* ID of original detector, e.g. VDS ID\"},{\"name\":\"measurementFeedId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"* data feed associated with this sensor\"},{\"name\":\"linkId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"linkOffset\",\"type\":\"double\",\"default\":0},{\"name\":\"laneNum\",\"type\":\"double\",\"default\":1},{\"name\":\"healthStatus\",\"type\":\"double\",\"doc\":\"* healthy by default\",\"default\":1}]}");
  /** * "Loop", etc. Translated to numeric type in the DB. */
  @Deprecated public java.lang.String type;
  /** * ID of original detector, e.g. VDS ID */
  @Deprecated public java.lang.String entityId;
  /** * data feed associated with this sensor */
  @Deprecated public java.lang.String measurementFeedId;
  @Deprecated public java.lang.String linkId;
  @Deprecated public double linkOffset;
  @Deprecated public double laneNum;
  /** * healthy by default */
  @Deprecated public double healthStatus;

  /**
   * Default constructor.
   */
  public Sensor() {}

  /**
   * All-args constructor.
   */
  public Sensor(java.lang.String type, java.lang.String entityId, java.lang.String measurementFeedId, java.lang.String linkId, java.lang.Double linkOffset, java.lang.Double laneNum, java.lang.Double healthStatus) {
    this.type = type;
    this.entityId = entityId;
    this.measurementFeedId = measurementFeedId;
    this.linkId = linkId;
    this.linkOffset = linkOffset;
    this.laneNum = laneNum;
    this.healthStatus = healthStatus;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return entityId;
    case 2: return measurementFeedId;
    case 3: return linkId;
    case 4: return linkOffset;
    case 5: return laneNum;
    case 6: return healthStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.String)value$; break;
    case 1: entityId = (java.lang.String)value$; break;
    case 2: measurementFeedId = (java.lang.String)value$; break;
    case 3: linkId = (java.lang.String)value$; break;
    case 4: linkOffset = (java.lang.Double)value$; break;
    case 5: laneNum = (java.lang.Double)value$; break;
    case 6: healthStatus = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * * "Loop", etc. Translated to numeric type in the DB.   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * * "Loop", etc. Translated to numeric type in the DB.   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'entityId' field.
   * * ID of original detector, e.g. VDS ID   */
  public java.lang.String getEntityId() {
    return entityId;
  }

  /**
   * Sets the value of the 'entityId' field.
   * * ID of original detector, e.g. VDS ID   * @param value the value to set.
   */
  public void setEntityId(java.lang.String value) {
    this.entityId = value;
  }

  /**
   * Gets the value of the 'measurementFeedId' field.
   * * data feed associated with this sensor   */
  public java.lang.String getMeasurementFeedId() {
    return measurementFeedId;
  }

  /**
   * Sets the value of the 'measurementFeedId' field.
   * * data feed associated with this sensor   * @param value the value to set.
   */
  public void setMeasurementFeedId(java.lang.String value) {
    this.measurementFeedId = value;
  }

  /**
   * Gets the value of the 'linkId' field.
   */
  public java.lang.String getLinkId() {
    return linkId;
  }

  /**
   * Sets the value of the 'linkId' field.
   * @param value the value to set.
   */
  public void setLinkId(java.lang.String value) {
    this.linkId = value;
  }

  /**
   * Gets the value of the 'linkOffset' field.
   */
  public java.lang.Double getLinkOffset() {
    return linkOffset;
  }

  /**
   * Sets the value of the 'linkOffset' field.
   * @param value the value to set.
   */
  public void setLinkOffset(java.lang.Double value) {
    this.linkOffset = value;
  }

  /**
   * Gets the value of the 'laneNum' field.
   */
  public java.lang.Double getLaneNum() {
    return laneNum;
  }

  /**
   * Sets the value of the 'laneNum' field.
   * @param value the value to set.
   */
  public void setLaneNum(java.lang.Double value) {
    this.laneNum = value;
  }

  /**
   * Gets the value of the 'healthStatus' field.
   * * healthy by default   */
  public java.lang.Double getHealthStatus() {
    return healthStatus;
  }

  /**
   * Sets the value of the 'healthStatus' field.
   * * healthy by default   * @param value the value to set.
   */
  public void setHealthStatus(java.lang.Double value) {
    this.healthStatus = value;
  }

  /** Creates a new Sensor RecordBuilder */
  public static edu.berkeley.path.model_elements_base.Sensor.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.Sensor.Builder();
  }
  
  /** Creates a new Sensor RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.Sensor.Builder newBuilder(edu.berkeley.path.model_elements_base.Sensor.Builder other) {
    return new edu.berkeley.path.model_elements_base.Sensor.Builder(other);
  }
  
  /** Creates a new Sensor RecordBuilder by copying an existing Sensor instance */
  public static edu.berkeley.path.model_elements_base.Sensor.Builder newBuilder(edu.berkeley.path.model_elements_base.Sensor other) {
    return new edu.berkeley.path.model_elements_base.Sensor.Builder(other);
  }
  
  /**
   * RecordBuilder for Sensor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sensor>
    implements org.apache.avro.data.RecordBuilder<Sensor> {

    private java.lang.String type;
    private java.lang.String entityId;
    private java.lang.String measurementFeedId;
    private java.lang.String linkId;
    private double linkOffset;
    private double laneNum;
    private double healthStatus;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.Sensor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.Sensor.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Sensor instance */
    private Builder(edu.berkeley.path.model_elements_base.Sensor other) {
            super(edu.berkeley.path.model_elements_base.Sensor.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = (java.lang.String) data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.entityId)) {
        this.entityId = (java.lang.String) data().deepCopy(fields()[1].schema(), other.entityId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.measurementFeedId)) {
        this.measurementFeedId = (java.lang.String) data().deepCopy(fields()[2].schema(), other.measurementFeedId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.linkId)) {
        this.linkId = (java.lang.String) data().deepCopy(fields()[3].schema(), other.linkId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.linkOffset)) {
        this.linkOffset = (java.lang.Double) data().deepCopy(fields()[4].schema(), other.linkOffset);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.laneNum)) {
        this.laneNum = (java.lang.Double) data().deepCopy(fields()[5].schema(), other.laneNum);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.healthStatus)) {
        this.healthStatus = (java.lang.Double) data().deepCopy(fields()[6].schema(), other.healthStatus);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'entityId' field */
    public java.lang.String getEntityId() {
      return entityId;
    }
    
    /** Sets the value of the 'entityId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setEntityId(java.lang.String value) {
      validate(fields()[1], value);
      this.entityId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'entityId' field has been set */
    public boolean hasEntityId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'entityId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearEntityId() {
      entityId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'measurementFeedId' field */
    public java.lang.String getMeasurementFeedId() {
      return measurementFeedId;
    }
    
    /** Sets the value of the 'measurementFeedId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setMeasurementFeedId(java.lang.String value) {
      validate(fields()[2], value);
      this.measurementFeedId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'measurementFeedId' field has been set */
    public boolean hasMeasurementFeedId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'measurementFeedId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearMeasurementFeedId() {
      measurementFeedId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'linkId' field */
    public java.lang.String getLinkId() {
      return linkId;
    }
    
    /** Sets the value of the 'linkId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setLinkId(java.lang.String value) {
      validate(fields()[3], value);
      this.linkId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'linkId' field has been set */
    public boolean hasLinkId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'linkId' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearLinkId() {
      linkId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'linkOffset' field */
    public java.lang.Double getLinkOffset() {
      return linkOffset;
    }
    
    /** Sets the value of the 'linkOffset' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setLinkOffset(double value) {
      validate(fields()[4], value);
      this.linkOffset = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'linkOffset' field has been set */
    public boolean hasLinkOffset() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'linkOffset' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearLinkOffset() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'laneNum' field */
    public java.lang.Double getLaneNum() {
      return laneNum;
    }
    
    /** Sets the value of the 'laneNum' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setLaneNum(double value) {
      validate(fields()[5], value);
      this.laneNum = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'laneNum' field has been set */
    public boolean hasLaneNum() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'laneNum' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearLaneNum() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'healthStatus' field */
    public java.lang.Double getHealthStatus() {
      return healthStatus;
    }
    
    /** Sets the value of the 'healthStatus' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder setHealthStatus(double value) {
      validate(fields()[6], value);
      this.healthStatus = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'healthStatus' field has been set */
    public boolean hasHealthStatus() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'healthStatus' field */
    public edu.berkeley.path.model_elements_base.Sensor.Builder clearHealthStatus() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Sensor build() {
      try {
        Sensor record = new Sensor();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.entityId = fieldSetFlags()[1] ? this.entityId : (java.lang.String) defaultValue(fields()[1]);
        record.measurementFeedId = fieldSetFlags()[2] ? this.measurementFeedId : (java.lang.String) defaultValue(fields()[2]);
        record.linkId = fieldSetFlags()[3] ? this.linkId : (java.lang.String) defaultValue(fields()[3]);
        record.linkOffset = fieldSetFlags()[4] ? this.linkOffset : (java.lang.Double) defaultValue(fields()[4]);
        record.laneNum = fieldSetFlags()[5] ? this.laneNum : (java.lang.Double) defaultValue(fields()[5]);
        record.healthStatus = fieldSetFlags()[6] ? this.healthStatus : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
