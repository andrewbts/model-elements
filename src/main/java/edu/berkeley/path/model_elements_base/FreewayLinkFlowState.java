/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.berkeley.path.model_elements_base;  
@SuppressWarnings("all")
/** * In- and out-flow state of one link at one time.
   *
   * The in- and out-flows are a quantity of interest computed by a CTM,
   * though not needed for either estimation of future time steps of a CTM. */
public class FreewayLinkFlowState extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreewayLinkFlowState\",\"namespace\":\"edu.berkeley.path.model_elements_base\",\"doc\":\"* In- and out-flow state of one link at one time.\\n   *\\n   * The in- and out-flows are a quantity of interest computed by a CTM,\\n   * though not needed for either estimation of future time steps of a CTM.\",\"fields\":[{\"name\":\"inFlow\",\"type\":\"double\"},{\"name\":\"outFlow\",\"type\":\"double\"}]}");
  @Deprecated public double inFlow;
  @Deprecated public double outFlow;

  /**
   * Default constructor.
   */
  public FreewayLinkFlowState() {}

  /**
   * All-args constructor.
   */
  public FreewayLinkFlowState(java.lang.Double inFlow, java.lang.Double outFlow) {
    this.inFlow = inFlow;
    this.outFlow = outFlow;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return inFlow;
    case 1: return outFlow;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: inFlow = (java.lang.Double)value$; break;
    case 1: outFlow = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'inFlow' field.
   */
  public java.lang.Double getInFlow() {
    return inFlow;
  }

  /**
   * Sets the value of the 'inFlow' field.
   * @param value the value to set.
   */
  public void setInFlow(java.lang.Double value) {
    this.inFlow = value;
  }

  /**
   * Gets the value of the 'outFlow' field.
   */
  public java.lang.Double getOutFlow() {
    return outFlow;
  }

  /**
   * Sets the value of the 'outFlow' field.
   * @param value the value to set.
   */
  public void setOutFlow(java.lang.Double value) {
    this.outFlow = value;
  }

  /** Creates a new FreewayLinkFlowState RecordBuilder */
  public static edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder newBuilder() {
    return new edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder();
  }
  
  /** Creates a new FreewayLinkFlowState RecordBuilder by copying an existing Builder */
  public static edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder other) {
    return new edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder(other);
  }
  
  /** Creates a new FreewayLinkFlowState RecordBuilder by copying an existing FreewayLinkFlowState instance */
  public static edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder newBuilder(edu.berkeley.path.model_elements_base.FreewayLinkFlowState other) {
    return new edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder(other);
  }
  
  /**
   * RecordBuilder for FreewayLinkFlowState instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreewayLinkFlowState>
    implements org.apache.avro.data.RecordBuilder<FreewayLinkFlowState> {

    private double inFlow;
    private double outFlow;

    /** Creates a new Builder */
    private Builder() {
      super(edu.berkeley.path.model_elements_base.FreewayLinkFlowState.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FreewayLinkFlowState instance */
    private Builder(edu.berkeley.path.model_elements_base.FreewayLinkFlowState other) {
            super(edu.berkeley.path.model_elements_base.FreewayLinkFlowState.SCHEMA$);
      if (isValidValue(fields()[0], other.inFlow)) {
        this.inFlow = (java.lang.Double) data().deepCopy(fields()[0].schema(), other.inFlow);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.outFlow)) {
        this.outFlow = (java.lang.Double) data().deepCopy(fields()[1].schema(), other.outFlow);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'inFlow' field */
    public java.lang.Double getInFlow() {
      return inFlow;
    }
    
    /** Sets the value of the 'inFlow' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder setInFlow(double value) {
      validate(fields()[0], value);
      this.inFlow = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'inFlow' field has been set */
    public boolean hasInFlow() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'inFlow' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder clearInFlow() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'outFlow' field */
    public java.lang.Double getOutFlow() {
      return outFlow;
    }
    
    /** Sets the value of the 'outFlow' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder setOutFlow(double value) {
      validate(fields()[1], value);
      this.outFlow = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'outFlow' field has been set */
    public boolean hasOutFlow() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'outFlow' field */
    public edu.berkeley.path.model_elements_base.FreewayLinkFlowState.Builder clearOutFlow() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FreewayLinkFlowState build() {
      try {
        FreewayLinkFlowState record = new FreewayLinkFlowState();
        record.inFlow = fieldSetFlags()[0] ? this.inFlow : (java.lang.Double) defaultValue(fields()[0]);
        record.outFlow = fieldSetFlags()[1] ? this.outFlow : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
